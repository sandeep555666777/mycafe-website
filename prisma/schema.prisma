// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id          String   @id @default(cuid())
  tableNumber Int      @unique
  qrCode      String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]
  sessions    TableSession[]
}

model TableSession {
  id        String   @id @default(cuid())
  tableId   String
  sessionId String   @unique
  cart      Json     // Store cart items as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  menuItems   MenuItem[]
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  categoryId  String
  isAvailable Boolean  @default(true)
  isVegetarian Boolean  @default(false)
  isSpicy     Boolean  @default(false)
  allergens   String[] // Array of allergen strings
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model Order {
  id            String   @id @default(cuid())
  tableId       String
  orderNumber   String   @unique
  customerName  String?
  customerPhone String?
  items         OrderItem[]
  subtotal      Float
  taxAmount     Float    @default(0)
  discountAmount Float   @default(0)
  total         Float
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod?
  notes         String?
  estimatedTime String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  table         Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  payment       Payment?
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  createdAt  DateTime @default(now())
  
  // Relations
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String   @unique
  amount        Float
  currency      String   @default("INR")
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  gateway       PaymentGateway
  gatewayId     String?  // External payment gateway ID
  gatewayData   Json?    // Store gateway response data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  WALLET
  NET_BANKING
}

enum PaymentGateway {
  RAZORPAY
  STRIPE
  CASH
}
